* goals

1. template specialization
2. generic programming
3. genetic programming
4. partial evaluation

* design

- level 0 (template system)

  - template variable
  - variable properties
    - concepts
    - constranits
    - etc.
    - add or remove properties
  - template recursion
    - expand templates recursively
    - max level of expansion
  - compile-time dispatches (e.g. static-if)
    - static-if
    - static-cond
    - static-case
  - separate definition
    - chain of matching (lexical order)
    - doesn't change the match order when redefined
    - reset-template
  - call-next-template
    - call next with relaxed variable properties
  - program construction based on template variables
    - static-eval with proper bindings 
  - lazy instantiation
    - only instantiate when requested so template variables'
      properties can be specified iteratively

- level 1 (generic programming)

  - syntax for type based specialization
  - syntax for constant specialization
  - syntax for type relation specialization

- level 2 

  - genetic programming
  - partial evaluation



* DEPRECATED OLD template system
  CLOSED: [2011-08-30 火 18:33]

** template

- form (can be partially instantiated by tapply)
- variable bindings

** functions/macros

- make-new-template [function]

  (make-new-template vars body)

  will return a template with empty bindings

- tlambda [macro]

  (tlambda (tvars...)
    form)

  for convenience

- tapply [macro] non-destructive

  (tapply template variable-substitution-rules)

  variable substitution rule can reference bounded variables.
  e.g.
  (tapply template (T1 fixnum) (T2 (if (eq T1 'fixnum) 'fixnum 'number)))

  NOTE: substitution rules will be evaluated, can be an arbitrary lisp form
  NOTE: it support currying

- deftemplate [macro]

  define named tlambda, and registered in a global table
  
- instantiate-template [function] non-destructive

  tapply and make sure all template variables are substituted in the
  final form. return only the form.

** examples

- simple example

CL-REWRITE> (deftemplate ex1 (T1 T2) (the T1 (+ x (the T2 (* y z)))))
#S(TEMPLATE :VARS (T1 T2)
            :BINDINGS NIL
            :BODY (THE T1 (+ X (THE T2 (* Y Z)))))

CL-REWRITE> (tapply (get-template 'ex1) (t1 'fixnum) (t2 (if (eq t1 'fixnum) 'integer 'number)))
#S(TEMPLATE :VARS (T1 T2)
            :BINDINGS ((T1 FIXNUM) (T2 INTEGER))
            :BODY (THE T1 (+ X (THE T2 (* Y Z)))))

CL-REWRITE> (instantiate-template * )
(THE FIXNUM (+ X (THE INTEGER (* Y Z))))

* DEPRECATED type based generic programming
  CLOSED: [2011-08-30 火 18:32]

** functions/macros

- defun/t

  e.g.

  (defun/t (foo T1) ((x T1) &optional (y T1 0))
    (the T1 (+ x y)))

  =>

  (deftemplate foo (T1)
    (progn
     (declaim (ftype (function (T1 T1) T1)))
     (defun foo (x &optional (y 0))
       (declare (type T1 x y))
       (the T1 (+ x y)))

- instantiate-function-by-types
- get-function-by-types
  
  retrieve the instantiated function, if non, calls
  instantiate-function-by-types

** featuers

- retrieve type info from declarations

  TODO: maybe retrieve type info from compiler's inference result in
  the future, need unification

- lazy instantiation

- auto recompilation

- TODO: complex type specification and unification

- TODO: unification rule/type computation

- TODO: allegro unboxed function hack

- TODO: customized declaration

